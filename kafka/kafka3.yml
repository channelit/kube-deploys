apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: kafka3
  name: kafka3
  namespace: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      run: kafka3
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      name: kafka3
      labels:
        run: kafka3
    spec:
      containers:
        - image: ghcr.io/channelit/kafka:latest
          imagePullPolicy: Always
          name: kafka3
          command: ["/bin/sh", "-c"]
          # args: ["export KAFKA_CLUSTER_ID=\"$(/opt/kafka/bin/kafka-storage.sh random-uuid)\"; /opt/kafka/bin/kafka-storage.sh format -t $KAFKA_CLUSTER_ID -c /conf/server.properties; /opt/kafka/bin/kafka-server-start.sh /conf/server.properties"]
          # args: ["/opt/kafka/bin/kafka-storage.sh format --ignore-formatted -t $(/opt/kafka/bin/kafka-storage.sh random-uuid) -c /conf/server.properties; /opt/kafka/bin/kafka-server-start.sh /conf/server.properties"]
          args: ["/opt/kafka/bin/kafka-storage.sh format -t $KAFKA_CLUSTER_ID -c /conf/server.properties; /opt/kafka/bin/kafka-server-start.sh /conf/server.properties"]
          resources:
            requests:
              memory: "512M"
              cpu: "500m"
            limits:
              memory: "512M"
              cpu: "500m"
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          env:
            - name: JMX_PORT
              value: "9998"
            - name: KAFKA_CLUSTER_ID
              value: o8hZC38eROOUpiucL9DbTA
            # - name: KAFKA_OPTS
            #   value: -Djava.security.auth.login.config=/conf/jaas.config
          ports:
            - name: server1
              containerPort: 29091
              protocol: TCP
            - name: server2
              containerPort: 29092
              protocol: TCP
            - name: server3
              containerPort: 29093
              protocol: TCP
            - name: client1
              containerPort: 9091
              protocol: TCP
            - name: client2
              containerPort: 9092
              protocol: TCP
            - name: client3
              containerPort: 9093
              protocol: TCP
            - name: client-outside
              containerPort: 39093
              protocol: TCP
          volumeMounts:
            - name: kafka3-volume
              mountPath: /conf
              readOnly: true
            # - name: kafka3-logs
            #   mountPath: /kafka-logs
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: kafka3-volume
          configMap:
            name: kafka3-config
            items:
              - key: "server.properties"
                path: "server.properties"
              - key: "jaas.config"
                path: "jaas.config"
        # - name: kafka3-logs
        #   persistentVolumeClaim:
        #     claimName: kafka3
---
apiVersion: v1
kind: Service
metadata:
  labels:
    run: kafka3
  name: kafka3
  namespace: kafka
spec:
  ports:
    - name: broker
      port: 9093
      protocol: TCP
      targetPort: 9093
    - name: controller
      port: 29093
      protocol: TCP
      targetPort: 29093
    - name: external
      port: 39093
      protocol: TCP
      targetPort: 39093
  selector:
    run: kafka3
  type: LoadBalancer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka3-config
  namespace: kafka
data:
  server.properties: |
      node.id=3
      process.roles=broker,controller
      controller.quorum.voters=1@kafka1:29091,2@0kafka2:29092,3@localhost:29093
      listeners=BROKER://0.0.0.0:9093,CONTROLLER://127.0.0.1:29093,EXTERNAL://0.0.0.0:39093
      listener.security.protocol.map=CONTROLLER:SASL_PLAINTEXT,BROKER:SASL_PLAINTEXT,EXTERNAL:SASL_PLAINTEXT
      advertised.listeners=BROKER://kafka3:9093,CONTROLLER://kafka3:29093
      listener.name.broker.sasl.plaintext.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="admin" password="admin-secret" user_admin="admin-secret" user_broker="broker-secret";
      listener.name.controller.sasl.plaintext.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="admin" password="admin-secret" user_admin="admin-secret" user_broker="broker-secret";
      sasl.mechanism.inter.broker.protocol=SCRAM-SHA-512
      sasl.enabled.mechanisms=SCRAM-SHA-512
      ssl.endpoint.identification.algorithm=
      num.network.threads=3
      num.io.threads=8
      inter.broker.listener.name=BROKER
      controller.listener.names=CONTROLLER
      socket.send.buffer.bytes=10240
      socket.receive.buffer.bytes=102400
      socket.request.max.bytes=104857600
      num.partitions=1
      offsets.topic.replication.factor=1
      num.recovery.threads.per.data.dir=1
      transaction.state.log.replication.factor=1
      transaction.state.log.min.isr=1
      log.retention.hours=168
      log.segment.bytes=1073741824
      log.retention.check.interval.ms=300000
      early.start.listeners=CONTROLLER
      super.users=User:admin
      allow.everyone.if.no.acl.found=true
  jaas.config: |
      KafkaServer {
        org.apache.kafka.common.security.scram.ScramLoginModule required username="admin" password="admin-secret" serviceName="kafka3";
      };

# ---
# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: kafka3
#   labels:
#     run: kafka3
#   namespace: kafka
# spec:
#   storageClassName: hostpath
#   capacity:
#     storage: 512Mi
#   accessModes:
#     - ReadWriteOnce
#   hostPath:
#     path: "/Users/hardikpatel/workbench/projects/kube-deploys/kafka/data/kafka3"
# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: kafka3
#   namespace: kafka
# spec:
#   storageClassName: hostpath
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 512Mi
