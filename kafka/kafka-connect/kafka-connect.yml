apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: kafka-connect
  name: kafka-connect
  namespace: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      run: kafka-connect
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        run: kafka-connect
    spec:
      containers:
        - image: ghcr.io/channelit/kafka-connect:latest
          imagePullPolicy: Always
          name: kafka-connect
          command: ["./opt/kafka/bin/connect-distributed.sh", "/conf/worker.properties"]
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          # lifecycle:
          #   postStart:
          #     exec:
          #       command: ["/bin/sh", "-c", "/conf/start-worker.sh"]
          env:
            - name: CLASSPATH
              value: /connectors/*
          ports:
            - name: rest
              containerPort: 8082
              protocol: TCP
          volumeMounts:
            - name: kafka-connect-volume
              mountPath: /conf
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: kafka-connect-volume
          configMap:
            name: kafka-connect-config
            items:
            - key: "worker.properties"
              path: "worker.properties"
            - key: "start-worker.sh"
              path: "start-worker.sh"
              mode: 0755
            - key: "source_postgres.json"
              path: "source_postgres.json"
              mode: 0755              
            - key: "sink_elastic.json"
              path: "sink_elastic.json"
              mode: 0755              
            - key: "sink_opensearch_aws.json"
              path: "sink_opensearch_aws.json"
              mode: 0755  
---
apiVersion: v1
kind: Service
metadata:
  labels:
    run: kafka-connect
  name: kafka-connect
  namespace: kafka
spec:
  ports:
    - name: rest
      port: 8082
      protocol: TCP
      targetPort: 8082
  selector:
    run: kafka-connect
  sessionAffinity: None
  type: LoadBalancer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-connect-config
  namespace: kafka
data:
  worker.properties: |
      group.id=workers
      bootstrap.servers=kafka1:29091,kafka2:29092,kafka3:29093
      key.converter=io.confluent.connect.json.JsonSchemaConverter
      value.converter=io.confluent.connect.json.JsonSchemaConverter
      key.converter.schema.registry.url=http://schema-registry:8081
      value.converter.schema.registry.url=http://schema-registry:8081
      plugin.path=/connectors
      listeners=http://0.0.0.0:8082
      config.storage.topic=worker-config
      offset.storage.topic=worker-offset
      status.storage.topic=worker-status
      heartbeat.interval.ms=5000
  start-worker.sh: |
      sleep 2m
      curl -i -X POST -H "Accept:application/json" -H "Content-Type:application/json" --data @conf/source_postgres.json http://localhost:8082/connectors/
  source_postgres.json: |
      {
        "name": "cdc-local",
        "config": {
          "connector.class": "io.debezium.connector.postgresql.PostgresConnector",
          "database.hostname": "postgres.postgres",
          "database.port": "5432",
          "database.user": "cits",
          "database.password": "admin",
          "database.dbname": "postgres",
          "key.converter": "io.confluent.connect.json.JsonSchemaConverter",
          "value.converter": "io.confluent.connect.json.JsonSchemaConverter",
          "key.converter.schema.registry.url": "http://schema-registry:8081",
          "value.converter.schema.registry.url": "http://schema-registry:8081",
          "database.server.name": "cdc",
          "plugin.name": "wal2json"
        }
      }
  sink_elastic.json: |
      {
        "name": "elastic-sink",
        "config": {
          "connector.class": "io.confluent.connect.elasticsearch.ElasticsearchSinkConnector",
          "connection.url": "http://elastic1.elastic.svc.cluster.local:9200",
          "tasks.max": "1",
          "topics": "cdc.public.employee",
          "type.name": "_doc",
          "value.converter": "org.apache.kafka.connect.json.JsonConverter",
          "value.converter.schemas.enable": "false",
          "schema.ignore": "true",
          "key.ignore": "true"
        }
      }
  sink_opensearch_aws.json: |
      {
        "name": "opensearch-aws-sink",
        "config": {
          "connector.class": "io.confluent.connect.elasticsearch.ElasticsearchSinkConnector",
          "connection.url": "CONNECTION_URL",
          "tasks.max": "1",
          "topics": "cdc.public.employee",
          "type.name": "opensearch-aws-sink",
          "key.converter": "io.confluent.connect.json.JsonSchemaConverter",
          "value.converter": "io.confluent.connect.json.JsonSchemaConverter",
          "key.converter.schema.registry.url": "http://schema-registry:8081",
          "value.converter.schema.registry.url": "http://schema-registry:8081",
          "schema.ignore": "true",
          "key.ignore": "true",
          "connection.username": "CONNECTION_USERNAME",
          "connection.password": "CONNECTION_PASSWORD"
        }
      }