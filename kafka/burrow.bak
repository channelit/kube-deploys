apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: burrow
  name: burrow
  namespace: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      run: burrow
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      name: burrow
      labels:
        run: burrow
    spec:
      containers:
        - image: cithub/burrow
          imagePullPolicy: Always
          name: burrow
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          ports:
            - name: server
              containerPort: 8000
              protocol: TCP
          volumeMounts:
            - name: burrow-config
              mountPath: /etc/burow/burrow.toml
              subPath: burrow.toml
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: burrow-volume
          configMap:
            name: burrow-config
---
apiVersion: v1
kind: Service
metadata:
  labels:
    run: burrow
  name: burrow
  namespace: kafka
spec:
  ports:
    - name: burrow
      port: 8000
      protocol: TCP
      targetPort: 8000
  selector:
    run: burrow
  type: LoadBalancer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka1-config
  namespace: kafka
data:
  server.properties: |
      [zookeeper]
      servers=[ "zoo1.zookeeper.svc.cluster.local:2181", "zoo2.zookeeper.svc.cluster.local:2181", "zoo3.zookeeper.svc.cluster.local:2181" ]
      timeout=6
      root-path="/burrow"

      [cluster.zoo]
      class-name="kafka"
      servers=[ "kafka2.kafka:29092" ]
      topic-refresh=60
      offset-refresh=30

      [consumer.zoo]
      class-name="kafka"
      cluster="zoo"
      servers=[ "kafka2.kafka:29092" ]
      group-denylist="^(console-consumer-|python-kafka-consumer-).*$"
      group-allowlist=""

      [httpserver.default]
      address=":8000"